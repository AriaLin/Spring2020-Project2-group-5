xlab("")+
ggtitle("Shootings Counts by Victims' race/year")
# event
eventimage = function (x, i){
data <- Shooting_data %>%
filter(OCCUR_DATE >= as.Date(x[i, ]$start_date, format = "%Y-%m-%d")&
OCCUR_DATE <= as.Date(x[i, ]$end_date, format = "%Y-%m-%d")) %>%
group_by(OCCUR_DATE) %>%
summarize(count = n())
g <- ggplot(data, aes(OCCUR_DATE, count)) +
geom_label(aes(label = wday(OCCUR_DATE, label = TRUE))) +
geom_line(color = "cornflowerblue") +
xlab("")+
scale_x_date(date_labels = "%b\n%d",
date_breaks = "1 day")
start <- as.Date(x[i, ]$beginning, format = "%Y-%m-%d")
end <- as.Date(x[i, ]$ending, format = "%Y-%m-%d")
g+annotate("rect", xmin = start, xmax = end,
ymin = -Inf, ymax = Inf, fill = "green",
alpha = .2) +
annotate("text", x = end + 0.4,
y = 10, label = x[i, ]$label,
color = "green", hjust = 0) +
theme_classic()
}
christmas <- data.frame(
"start_date" = c(
"2006-12-20","2007-12-20","2008-12-20","2009-12-20","2010-12-20",
"2011-12-20","2012-12-20","2013-12-20","2014-12-20",
"2015-12-20","2016-12-20","2017-12-20","2018-12-20"),
"end_date" = c(
"2007-01-03","2008-01-03","2009-01-03","2010-01-03","2011-01-03",
"2012-01-03","2013-01-03","2014-01-03","2015-01-03",
"2016-01-03","2017-01-03","2018-01-03","2018-01-03"),
"beginning" = c(
"2006-12-24","2007-12-24","2008-12-24","2009-12-24","2010-12-24",
"2011-12-24","2012-12-24","2013-12-24","2014-12-24",
"2015-12-24","2016-12-24","2017-12-24", "2018-12-24"),
"ending" = c(
"2006-12-27", "2007-12-27","2008-12-27","2009-12-27","2010-12-27",
"2011-12-27","2012-12-27","2013-12-27","2014-12-27",
"2015-12-27","2016-12-27","2017-12-27","2018-12-27"),
"label" = rep("Dec 24 - Dec 27", 13)
)
new_year<-data.frame(
"start_date" = c(
"2006-12-22","2007-12-22","2008-12-22","2009-12-22","2010-12-22",
"2011-12-22","2012-12-22","2013-12-22","2014-12-22",
"2015-12-22","2016-12-22","2017-12-22","2018-12-22"),
"end_date" = c(
"2007-01-10","2008-01-10","2009-01-10","2010-01-10","2011-01-10",
"2012-01-10","2013-01-10","2014-01-10","2015-01-10",
"2016-01-10","2017-01-10","2018-01-10","2019-01-10"),
"beginning" = c(
"2006-12-31","2007-12-31","2008-12-31","2009-12-31","2010-12-31",
"2011-12-31","2012-12-31","2013-12-31","2014-12-31",
"2015-12-31","2016-12-31","2017-12-31", "2018-12-28"),
"ending" = c(
"2007-01-03", "2008-01-03","2009-01-03","2010-01-03","2011-01-03",
"2012-01-03","2013-01-03","2014-01-03","2015-01-03",
"2016-01-03","2017-01-03","2018-01-03", "2019-01-03"),
"label" = rep("Dec 31 - Jan 03",13)
)
Independence_day<-data.frame(
"start_date" = c(
"2006-06-30","2007-06-30","2008-06-30","2009-06-30","2010-06-30",
"2011-06-30","2012-06-30","2013-06-30","2014-06-30",
"2015-06-30","2016-06-30","2017-06-30","2018-06-30"),
"end_date" = c(
"2006-07-13","2007-07-13","2008-07-13","2009-07-13","2010-07-13",
"2011-07-13","2012-07-13","2013-07-13","2014-07-13",
"2015-07-13","2016-07-13","2017-07-13","2018-07-13"),
"beginning" = c(
"2006-07-03","2007-07-03","2008-07-03","2009-07-03","2010-07-03",
"2011-07-03","2012-07-03","2013-07-03","2014-07-03",
"2015-07-03","2016-07-03","2017-07-03", "2018-07-03"),
"ending" = c(
"2006-07-06", "2007-07-06","2008-07-06","2009-07-06","2010-07-06",
"2011-07-06","2012-07-06","2013-07-06","2014-07-06",
"2015-07-06","2016-07-06","2017-07-06","2018-07-06"),
"label" = rep("Jul 03 - Jul 06", 13)
)
Halloween<-data.frame(
"start_date" = c(
"2006-10-25","2007-10-25","2008-10-25","2009-10-25","2010-10-25",
"2011-10-25","2012-10-25","2013-10-25","2014-10-25",
"2015-10-25","2016-10-25","2017-10-25","2018-10-25"),
"end_date" = c(
"2006-11-03","2007-11-03","2008-11-03","2009-11-03","2010-11-03",
"2011-11-03","2012-11-03","2013-11-03","2014-11-03",
"2015-11-03","2016-11-03","2017-11-03","2018-11-03"),
"beginning" = c(
"2006-10-30","2007-10-30","2008-10-30","2009-10-30","2010-10-30",
"2011-10-30","2012-10-30","2013-10-30","2014-10-30",
"2015-10-30","2016-10-30","2017-10-30", "2018-10-30"),
"ending" = c(
"2006-11-02", "2007-11-02","2008-11-02","2009-11-02","2010-11-02",
"2011-11-02","2012-11-02","2013-11-02","2014-11-02",
"2015-11-02","2016-11-02","2017-11-02","2018-11-02"),
"label" = rep("Oct 30 - Nov 02", 13)
)
co <- function(cho) {
if (cho == "Independence Day") return(Independence_day)
if (cho == "Christmas") return(christmas)
if (cho == "Halloween") return(Halloween)
if (cho == "New Year") return(new_year)
}
runApp('app')
runApp('app')
runApp('app')
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/doc/NYCshooting')
# animation
Shooting_data <- read.csv("NYPD_Shooting_modified1.csv")
install.packages("dtplyr")
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='figs/',
echo=T, warning=FALSE, message=FALSE)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
# install.packages("devtools")
library(devtools)
library(dtplyr)
if (!require("shiny")) install.packages("shiny")
library(shiny)
runExample("01_hello")
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if (!require("lubridate")) install.packages('lubridate')
if (!require("ggmap")) install.packages('ggmap')
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if (!require("shiny")) install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(100)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(leaflet)
library(geojsonio)
library(lubridate)
library(rmapshaper)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(tidyverse)
library(plotly)
library(ggpubr)
library(gridExtra)
library(cowplot)
library(shinyWidgets)
library(htmlwidgets)
library(shinyjs)
library(shiny)
library(shinydashboard)
# animation
Shooting_data <- read.csv("NYPD_Shooting_modified1.csv")
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/doc/NYCshooting')
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/doc/NYCshooting')
# animation
Shooting_data <- read.csv("NYPD_Shooting_modified1.csv")
# animation
Shooting_data <- read.csv("../NYPD_Shooting_modified1.csv")
# animation
Shooting_data <- read.csv("../fall2019-proj2--sec2-grp10/NYPD_Shooting_modified1.csv")
# animation
Shooting_data <- read.csv("../data/NYPD_Shooting_modified1.csv")
# animation
Shooting_data <- read.csv("../fall2019-proj2--sec2-grp10/data/NYPD_Shooting_modified1.csv")
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/doc/NYCshooting')
# animation
Shooting_data <- read.csv("NYPD_Shooting_modified1.csv")
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/doc/NYCshooting')
?register_google
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/app')
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp10/doc/NYCshooting')
runApp()
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp7/app')
install.packages("zipcode")
library(zipcode)
shiny::runApp()
runApp()
tabPanel(p("Map",style="font-family: Chalkduster"), icon  = icon("map-marked"),
# lealfet map
leafletOutput("map", height = "95vh"),
# output panel (By zipcode)
absolutePanel(
id = "control",
class = "panel panel-default",
fixed = TRUE,
draggable = TRUE,
top = 120,
left = "auto",
right = 20,
bottom = "auto",
width = 400,
height = "auto",
h2("Tips for You"),
tags$style("#click_coord{font-size: 16px;display:inline}"),
h4('Current Location:',style="display:inline"),  p(textOutput("click_coord")),
h4("Nearest Park to Walk Your Dog: "),  p(textOutput("nearest_park")) ,
tags$style("#distance_to_park{font-size: 16px;display:inline}"),
h4("Distance to the Nearest Park: ",style="display:inline"), textOutput("distance_to_park"), br(),
tags$style("#walk_min{16px;display:inline}"),
h4("Time Taken to the Nearest Park: ",style="display:inline"), textOutput("walk_min") , br(),
tags$style("#dog_num{16px;display:inline}"),br(),
h4("Total Number of Dogs Near You: ",style="display:inline"), textOutput("dog_num") , br(),
tags$style("#dog_age{16px;display:inline}"),br(),
h4("Average Age: ",style="display:inline"), textOutput("dog_age") , br(), br(),
h4("Top Three Most Popular Breed: ",style="display:inline"), htmlOutput("dog_breeds") ,
h4("Male to Female Ratio"),
plotlyOutput("male_female_pie", height = "400")
)
),
install.packages(c("googleVis", "leaflet.extras"))
#Get the Google API
register_google(key = "AIzaSyAXxi_jjBKmoortYOFU1WeenatppEgJgdc")
marker_opt <- markerOptions(opacity = 0.7, riseOnHover = TRUE)
library(shiny)
library(leaflet)
library(data.table)
library(plotly)
library(shinyWidgets)
library(googleVis)
library(geosphere)
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp8/app')
runApp('~/Documents/GitHub/fall2019-proj2--sec2-grp8/app')
library(shiny)
library(leaflet)
library(data.table)
library(plotly)
library(shinyWidgets)
library(googleVis)
library(geosphere)
library(leaflet.extras)
library(ggmap)
#Get the Google API
register_google(key = "AIzaSyAXxi_jjBKmoortYOFU1WeenatppEgJgdc")
marker_opt <- markerOptions(opacity = 0.7, riseOnHover = TRUE)
### pallette for circle fill color #6666cc  #3333cc
pal <- colorNumeric("#666699",c(0,1), na.color = "#808080" )
runApp('~/Documents/GitHub/Spring2020-Project2-group-5/app')
runApp('~/Documents/GitHub/Spring2020-Project2-group-5/app')
View(pal)
runApp('~/Documents/GitHub/Spring2020-Project2-group-5/app')
runApp('~/Documents/GitHub/Spring2020-Project2-group-5/app')
install.packages("rsconnect")
shiny::runApp()
runApp()
install.packages("rsconnect")
shiny::runApp()
install.packages("rsconnect")
runApp()
install.packages("rsconnect")
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
# load homeless data
Homebase_Centers<-read.csv('../data/homeless/Directory_Of_Homebase_Locations.csv')
after_school_programs<-read.csv('../data/homeless/DYCD_after-school_programs__Runaway_And_Homeless_Youth.csv')
Health_Insurance<-read.csv('../data/homeless/Primary_Care_Access_and_Planning_-_Health_Insurance_Enrollment.csv')
Job_Centers<-read.csv('../data/homeless/Directory_Of_Job_Centers.csv')
condom_distribution<-read.csv('../data/homeless/NYC_Condom_Availability_Program_-_HIV_condom_distribution_locations.csv')
Food_Stamp_Centers<-read.csv('../data/homeless/Directory_of_Food_Stamp_Centers.csv')
radar <- read.csv('../data/homeless/radar.csv')
save(Homebase_Centers,Food_Stamp_Centers,after_school_programs,Health_Insurance,Job_Centers,condom_distribution, file="../app/homeless.RData")
runApp()
runApp()
runApp()
#remotes::install_github("mfherman/nycgeo")
library(nycgeo)
runApp()
runApp()
runApp()
load("/Users/kw/Documents/GitHub/Spring2020-Project2-group-5/app/DSNY_Graffiti_Tracking.RData")
View(gra_df)
runApp()
runApp()
# load homeless data
Homebase_Centers<-read.csv('../data/homeless/Directory_Of_Homebase_Locations.csv')
after_school_programs<-read.csv('../data/homeless/DYCD_after-school_programs__Runaway_And_Homeless_Youth.csv')
Health_Insurance<-read.csv('../data/homeless/Primary_Care_Access_and_Planning_-_Health_Insurance_Enrollment.csv')
Job_Centers<-read.csv('../data/homeless/Directory_Of_Job_Centers.csv')
condom_distribution<-read.csv('../data/homeless/NYC_Condom_Availability_Program_-_HIV_condom_distribution_locations.csv')
Food_Stamp_Centers<-read.csv('../data/homeless/Directory_of_Food_Stamp_Centers.csv')
radar <- read.csv('../data/homeless/radar.csv')
save(Homebase_Centers,Food_Stamp_Centers,after_school_programs,Health_Insurance,Job_Centers,condom_distribution, file="../app/homeless.RData")
save(Homebase_Centers,Food_Stamp_Centers,after_school_programs,Health_Insurance,Job_Centers,condom_distribution, file="../app/homeless.RData")
runApp()
runApp()
runApp()
runApp()
my<-read.csv("../data/homeless/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv")
runApp()
runApp()
my
View(my)
temp_df =  my %>%
#  filter(status == "Closed") %>%
group_by(Borough_cd_id) %>%
summarise(close_count = n()) %>%
left_join(my %>%
group_by(Borough_cd_id) %>%
summarise(ttl_count = n()), by = "Borough_cd_id") %>%
ungroup()
map_data <- geo_join(nhyc_cd_data, temp_df, "Borough_cd_id",  "Borough_cd_id", how = "inner") %>%
mutate(ttl_count = as.numeric(ttl_count))
#remotes::install_github("mfherman/nycgeo")
library(nycgeo)
library(sf)
nhyc_cd_data <- cd_sf
map_data <- geo_join(nhyc_cd_data, temp_df, "Borough_cd_id",  "Borough_cd_id", how = "inner") %>%
mutate(ttl_count = as.numeric(ttl_count))
map_data <- geo_join(nhyc_cd_data, temp_df, "borough_cd_id",  "Borough_cd_id", how = "inner") %>%
mutate(ttl_count = as.numeric(ttl_count))
View(temp_df)
runApp('~/Documents/GitHub/fall2019-proj2--sec1-grp7/app')
my<-read.csv("../data/homeless/New_York_City_Population_By_Community_Districts.csv")
temp_df =  my %>%
#  filter(status == "Closed") %>%
group_by(Borough_cd_id) %>%
summarise(close_count = n()) %>%
left_join(my %>%
group_by(Borough_cd_id) %>%
summarise(ttl_count = n()), by = "Borough_cd_id") %>%
ungroup()
View(temp_df)
gra_df<-read.csv("../data/homeless/New_York_City_Population_By_Community_Districts.csv")
View(gra_df)
gra_df = gra_df %>%
janitor::clean_names() %>%
filter(!is.na(latitude) &  !is.na(longitude) & !is.na(city_council_district)) %>%
mutate(cd_id = str_extract(community_board, "[[:digit:]]+"),
borough_id = case_when(
borough == "MANHATTAN" ~ "1",
borough == "BRONX" ~ "2",
borough == "BROOKLYN" ~ "3",
borough == "QUEENS" ~ "4",
borough == "STATEN ISLAND" ~ "5"),
borough_cd_id = str_c(borough_id, cd_id))
nhyc_cd_data <- cd_sf
load("/Users/kw/Documents/GitHub/Spring2020-Project2-group-5/app/DSNY_Graffiti_Tracking.RData")
gra_df = gra_df %>%
janitor::clean_names() %>%
filter(!is.na(latitude) &  !is.na(longitude) & !is.na(city_council_district)) %>%
mutate(cd_id = str_extract(community_board, "[[:digit:]]+"),
borough_id = case_when(
borough == "MANHATTAN" ~ "1",
borough == "BRONX" ~ "2",
borough == "BROOKLYN" ~ "3",
borough == "QUEENS" ~ "4",
borough == "STATEN ISLAND" ~ "5"),
borough_cd_id = str_c(borough_id, cd_id))
temp_df =  gra_df %>%
filter(status == "Closed") %>%
group_by(borough_cd_id, status) %>%
summarise(close_count = n()) %>%
left_join(gra_df %>%
group_by(borough_cd_id) %>%
summarise(ttl_count = n()), by = "borough_cd_id") %>%
mutate(close_rate = close_count/ttl_count) %>%
ungroup()
map_data <- geo_join(nhyc_cd_data, temp_df, "borough_cd_id",  "borough_cd_id", how = "inner") %>%
mutate(ttl_count = as.numeric(ttl_count), close_rate = as.numeric(close_rate))
View(map_data)
runApp('~/Documents/GitHub/fall2019-proj2--sec1-grp7/app')
View(temp_df)
map_data <- geo_join(nhyc_cd_data, my, "borough_cd_id",  "borough_cd_id", how = "inner") %>%
output$map2 <- renderLeaflet({
if(input$selectb == "count"){
bins <- c(0, 200, 400, 600, 800, 1000, 1400, 1800)
pal <- colorBin("Reds", domain = map_data$ttl_count, bins = bins)
popup1 = paste0('<strong>Count: </strong><br>', map_data$ttl_count,
'<br><strong>Close Rate: </strong><br>', round(map_data$close_rate,2),
'<br><strong>Name: </strong><br>', map_data$cd_name)
map_data %>%
st_transform(., "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addPolygons(popup = popup1,
layerId=~borough_cd_id,
#label = ~ttl_count,
fillColor = ~pal(ttl_count),
color = 'grey',
fillOpacity = .6,
weight = 1,
dashArray = "3") %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend(pal = pal, values = ~bins, opacity = 0.6, title = "Number of Complaints",
position = "bottomright")
} else{
bins2 <- c(0.3, 0.5, 0.7, 0.9, 1)
pal2 <- colorBin("Blues", domain = map_data$close_rate, bins = bins2)
popup2 = paste0('<strong>Count: </strong><br>', map_data$ttl_count,
'<br><strong>Close Rate: </strong><br>', round(map_data$close_rate,2),
'<br><strong>Name: </strong><br>', map_data$cd_name)
map_data %>%
st_transform(., "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addPolygons(popup = popup2,
layerId=~borough_cd_id,
#label = ~ttl_count,
fillColor = ~pal2(close_rate),
color = 'grey',
fillOpacity = .6,
weight = 1,
dashArray = "3") %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend(pal = pal2, values = ~bins2, opacity = 0.6, title = "Close rate",
position = "bottomright")
}
})
map_data <- geo_join(nhyc_cd_data, my, "borough_cd_id",  "borough_cd_id", how = "inner") %>%
output$map2 <- renderLeaflet({
if(input$selectb == "count"){
bins <- c(0, 200, 400, 600, 800, 1000, 1400, 1800)
pal <- colorBin("Reds", domain = map_data$ttl_count, bins = bins)
popup1 = paste0('<strong>Count: </strong><br>', map_data$ttl_count,
'<br><strong>Close Rate: </strong><br>', round(map_data$close_rate,2),
'<br><strong>Name: </strong><br>', map_data$cd_name)
map_data %>%
st_transform(., "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addPolygons(popup = popup1,
layerId=~borough_cd_id,
#label = ~ttl_count,
fillColor = ~pal(ttl_count),
color = 'grey',
fillOpacity = .6,
weight = 1,
dashArray = "3") %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend(pal = pal, values = ~bins, opacity = 0.6, title = "Number of Complaints",
position = "bottomright")
} else{
bins2 <- c(0.3, 0.5, 0.7, 0.9, 1)
pal2 <- colorBin("Blues", domain = map_data$close_rate, bins = bins2)
popup2 = paste0('<strong>Count: </strong><br>', map_data$ttl_count,
'<br><strong>Close Rate: </strong><br>', round(map_data$close_rate,2),
'<br><strong>Name: </strong><br>', map_data$cd_name)
map_data %>%
st_transform(., "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addPolygons(popup = popup2,
layerId=~borough_cd_id,
#label = ~ttl_count,
fillColor = ~pal2(close_rate),
color = 'grey',
fillOpacity = .6,
weight = 1,
dashArray = "3") %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend(pal = pal2, values = ~bins2, opacity = 0.6, title = "Close rate",
position = "bottomright")
}
})
map_data <- geo_join(nhyc_cd_data, my, "borough_cd_id",  "borough_cd_id", how = "inner")
View(nhyc_cd_data)
map_data <- geo_join(nhyc_cd_data, my, "borough_cd_id",  "Borough_cd_id", how = "inner")
my<-read.csv("../data/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv")
my<-read.csv("../data/homeless/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv")
map_data <- geo_join(nhyc_cd_data, my, "borough_cd_id",  "borough_cd_id", how = "inner")
View(my)
my<-read.csv("../data/homeless/Individual_Census_by_Borough__Community_District__and_Facility_Type.csv")
my
